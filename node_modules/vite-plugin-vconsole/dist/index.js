"use strict";Object.defineProperty(exports, "__esModule", {value: true});// src/index.ts
var parseVConsoleOptions = (config) => Object.keys(config).reduce((code, key) => {
  const value = config[key];
  if (typeof value === "function") {
    if (/^[(f]/.test(value.toString())) {
      code += `${key}: ${value},`;
      return code;
    } else {
      code += `${value},`;
      return code;
    }
  }
  code += `${key}: ${JSON.stringify(config[key])},`;
  return code;
}, "");
function viteVConsole(opt) {
  let viteConfig;
  let isDev = false;
  const { entry, enabled = true, localEnabled = false, config = {} } = opt;
  let entryPath = Array.isArray(entry) ? entry : [entry];
  if (process.platform === "win32")
    entryPath = entryPath.map((item) => item.replace(/\\/g, "/"));
  return {
    name: "vite:vconsole",
    enforce: "pre",
    configResolved(resolvedConfig) {
      viteConfig = resolvedConfig;
      isDev = viteConfig.command === "serve";
    },
    transform(_source, id) {
      const enabledTruly = localEnabled && isDev || enabled && !isDev;
      if (entryPath.includes(id) && enabledTruly) {
        const code = `/* eslint-disable */;import VConsole from 'vconsole';new VConsole({${parseVConsoleOptions(config)}});/* eslint-enable */${_source}`;
        return {
          code,
          map: null
        };
      }
      return {
        code: _source,
        map: null
      };
    }
  };
}


exports.viteVConsole = viteVConsole;
